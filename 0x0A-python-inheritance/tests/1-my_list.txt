====================
1. My_list module
====================
Import module:
    >>> My_list = __import__('1-my_list').MyList

Function:
=======.
Class that inherits from class list, and add the print sorted method
Operations:
=========
'object' type must be My_list class:
    >>> object = My_list()
    >>> type(object) is My_list
    True

'object' append should add elements to the My_list class:
    >>> object.append(-10)
    >>> print(object)
    [-10]

'object' appending different types:
    >>> object.append('a')
    >>> object.append(576)
    >>> object.append(6.9)
    >>> object.append(True)
    >>> object.append((5, 7))
    >>> print(object)
    [-10, 'a', 576, 6.9, True, (5, 7)]

'object' calling print_sorted method:
    >>> object.print_sorted()
    Traceback (most recent call last):
    TypeError: unorderable types: str() < int()

'numeros' instancing My_list with empty list:
    >>> numeros = My_list([0, 78, 12, 45])
    >>> print(numeros)
    [0, 78, 12, 45]

'numeros' with sorted method:
    >>> numeros.print_sorted()
    [0, 12, 45, 78]

'numeros' instancing with None:
    >>> numeros = My_list([None])
    >>> print(numeros)
    [None]

    >>> MyList = __import__('1-my_list').MyList

Test case #0: A test case to order a disordered list of positive integers
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

    >>> print(my_list)
    [1, 4, 2, 3, 5]

Test case #1: A test case to order a disordered list of positive integers
    >>> my_list = MyList()
    >>> my_list.append(5)
    >>> my_list.append(4)
    >>> my_list.append(3)
    >>> my_list.append(2)
    >>> my_list.append(1)
    >>> print(my_list)
    [5, 4, 3, 2, 1]

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

    >>> print(my_list)
    [5, 4, 3, 2, 1]


Test case #2: A test case for a empty list
    >>> my_list = MyList()
    >>> print(my_list)
    []

    >>> my_list.print_sorted()
    []

    >>> print(my_list)
    []

Test case #3: A test case for do nothing
    >>> my_list = MyList()
    >>> my_list.append(-5)
    >>> my_list.append(-4)
    >>> my_list.append(-3)
    >>> my_list.append(-2)
    >>> my_list.append(-1)
    >>> print(my_list)
    [-5, -4, -3, -2, -1]

    >>> my_list.print_sorted()
    [-5, -4, -3, -2, -1]

    >>> print(my_list)
    [-5, -4, -3, -2, -1]


Test case #4: A test case to order a disordered list of negative integers
    >>> my_list = MyList()
    >>> my_list.append(-1)
    >>> my_list.append(-4)
    >>> my_list.append(-2)
    >>> my_list.append(-3)
    >>> my_list.append(-5)
    >>> print(my_list)
    [-1, -4, -2, -3, -5]

    >>> my_list.print_sorted()
    [-5, -4, -3, -2, -1]

    >>> print(my_list)
    [-1, -4, -2, -3, -5]


Section // Attribute Errors
============================
Test case #5: A invalid test case of tuples
    >>> my_list = (1, 2)
    >>> print(my_list)
    (1, 2)

    >>> my_list.print_sorted()
    Traceback (most recent call last):
    AttributeError: 'tuple' object has no attribute 'print_sorted'
    >>> print(my_list)
    (1, 2)
